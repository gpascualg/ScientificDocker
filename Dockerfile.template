FROM {{base}}
MAINTAINER Guillem Pascual <gpascualg93@gmail.com>

# Update + dependencies #
#########################

[[if tensorflow_dependencies]]
RUN apt-get update && \
	apt-get install -y curl bzip2 software-properties-common zip g++ unzip cmake vim \
		libxrender1 libfontconfig1 git lua5.3 lua5.3-dev \
		swig pkg-config openjdk-8-jdk-headless autoconf locate build-essential \
		libpng-dev libfreetype6-dev libzmq3-dev zlib1g-dev
[[endif]]
[[if build_caffe]]
RUN apt-get update && \
	apt-get install -y curl bzip2 software-properties-common zip g++ unzip cmake vim \
		libxrender1 libfontconfig1 git lua5.3 lua5.3-dev \
		swig pkg-config libsnappy-dev libhdf5-serial-dev libatlas-base-dev liblmdb-dev \
                autoconf protobuf-compiler libsm6  && \
        apt-get install --no-install-recommends -y libboost-all-dev
[[endif]]

# Get anaconda #
################
[[if python_version27]]
RUN curl -OL https://repo.continuum.io/archive/Anaconda2-5.2.0-Linux-x86_64.sh && \
	bash Anaconda2-5.2.0-Linux-x86_64.sh -b -p /opt/anaconda && \
	rm Anaconda2-5.2.0-Linux-x86_64.sh
[[else]]
RUN curl -OL https://repo.continuum.io/archive/Anaconda3-5.2.0-Linux-x86_64.sh && \
	bash Anaconda3-5.2.0-Linux-x86_64.sh -b -p /opt/anaconda && \
	rm Anaconda3-5.2.0-Linux-x86_64.sh
[[endif]]


## Export path
ENV PATH=/opt/anaconda/bin:/root/bin:/usr/local/bin:$PATH \
	LD_LIBRARY_PATH=/usr/local/lib:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64/stubs:$LD_LIBRARY_PATH

## Configure anaconda
EXPOSE 8888

# Install other dependencies #
##############################
RUN conda install anaconda python=3.6 pip -y && \
	pip install --upgrade pip && \
	pip install tqdm seaborn selenium keras

# Permanent volumnes #
######################
RUN mkdir /notebooks
VOLUME ["/notebooks"]

RUN mkdir /data
VOLUME ["/data"]

[[if tensorflow_generic]]

RUN pip install tensorflow-gpu

[[endif]]
[[if build_tensorflow]]

# Get Bazel #
#############
# 0.5.4 was working
RUN echo "startup --batch" >>/etc/bazel.bazelrc && \
        echo "build --spawn_strategy=standalone --genrule_strategy=standalone" >>/etc/bazel.bazelrc && \
	curl -O -L https://github.com/bazelbuild/bazel/releases/download/{{bazel_version}}/bazel-{{bazel_version}}-installer-linux-x86_64.sh && \
	chmod +x bazel-{{bazel_version}}-installer-linux-x86_64.sh && \
	./bazel-{{bazel_version}}-installer-linux-x86_64.sh && \
	rm ./bazel-{{bazel_version}}-installer-linux-x86_64.sh


# Get tensorflow #
##################
RUN git clone --branch={{tensorflow_version}} --depth=1 https://github.com/tensorflow/tensorflow
WORKDIR tensorflow

RUN mkdir /usr/local/cuda-{{cuda_version}}/nccl &&  \
    ln -s /usr/include /usr/local/cuda-{{cuda_version}}/nccl/include && \
    ln -s /usr/lib/x86_64-linux-gnu /usr/local/cuda-{{cuda_version}}/nccl/lib

ADD NCCL-SLA.txt /usr/local/cuda-{{cuda_version}}/

## Setup bazel configuration variables
ENV PYTHON_BIN_PATH=/opt/anaconda/bin/python \
	USE_DEFAULT_PYTHON_LIB_PATH=1 \
	LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH} \
	TF_NEED_MKL=1 \
	TF_DOWNLOAD_MKL=1 \ 
	TF_NCCL_VERSION={{nccl_version}} \
        NCCL_INSTALL_PATH=/usr/local/cuda-{{cuda_version}}/nccl \
	TF_NEED_CUDA={{use_cuda}} \
	TF_NEED_OPENCL={{use_opencl}} \ 
	TF_NEED_JEMALLOC=1 \
	TF_NEED_AWS=0 \
	TF_NEED_KAFKA=0 \
	TF_NEED_OPENCL_SYCL=0 \
	TF_NEED_COMPUTECPP=0 \
	TF_NEED_TENSORRT=0 \
	TF_NEED_VERBS=0 \
	TF_NEED_HDFS=0 \
	TF_NEED_GDR=0 \
	TF_NEED_MPI=0 \
	TF_ENABLE_XLA=1 \
	TF_CUDA_CLANG=0 \
	TF_NEED_GCP=0 \
	TF_CUDA_VERSION={{cuda_version}} \
	TF_CUDNN_VERSION={{cudnn_version}} \
	CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu \
	TF_CUDA_COMPUTE_CAPABILITIES={{compute_capabilities}}

# Check NCCL version matches
RUN NCCL_VERSION=$(dpkg -s libnccl2 | grep Version | sed -En 's/.* (([0-9]\.)+[0-9]+)-.*/\1/p'); if [ "$TF_NCCL_VERSION" != "$NCCL_VERSION" ]; then (>&2 echo "set --nccl-version=$NCCL_VERSION (currently using $TF_NCCL_VERSION)"); exit 1; fi

RUN chmod +x configure && \
	sed -i -e '3,4d' configure && \
	./configure

# Finds optimal GCC flags
[[if use_cuda]]
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
	bazel build -s \
		$(gcc -msse4.1 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-msse4.1") \
		$(gcc -msse4.2 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-msse4.2") \
		$(gcc -mavx -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-mavx") \
		$(gcc -mavx2 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-mavx2") \
	    --config=opt --config=cuda --verbose_failures --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
		--jobs=$(grep -c '^processor' /proc/cpuinfo) //tensorflow/tools/pip_package:build_pip_package
[[else]]
	RUN bazel build -s \
		$(gcc -msse4.1 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-msse4.1") \
		$(gcc -msse4.2 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-msse4.2") \
		$(gcc -mavx -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-mavx") \
		$(gcc -mavx2 -dM -E - < /dev/null | egrep -q "SSE|AVX" && echo "--copt=-mavx2") \
		--config=opt --verbose_failures \
		--jobs=$(grep -c '^processor' /proc/cpuinfo) //tensorflow/tools/pip_package:build_pip_package
[[endif]]

RUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg && \
	pip install /tmp/tensorflow_pkg/$(ls /tmp/tensorflow_pkg)

## Back to root
WORKDIR ..

[[endif]]


# Fetch RocksDB #
#################
RUN git clone https://github.com/facebook/rocksdb.git && \
	mkdir rocksdb/build && \
	cd rocksdb/build && \
	git checkout {{rocksdb_version}} && \
	cmake .. && \
	make -j $(grep -c '^processor' /proc/cpuinfo) && \
	make install && \
	cd ../.. && \
	rm -rf rocksdb


# LSYNCD #
#########
RUN git clone https://github.com/axkibe/lsyncd && \
	mkdir lsyncd/build && \
	cd lsyncd/build && \
	cmake .. && \
	make -j $(grep -c '^processor' /proc/cpuinfo) && \
	make install && \
	cd ../.. && \
	rm -rf lsyncd


[[if build_caffe]]

# Get Caffe dependencies #
##########################

## Opencv
RUN git clone https://github.com/opencv/opencv.git
RUN mkdir opencv/build
WORKDIR opencv/build
RUN cmake  -DCMAKE_BUILD_TYPE=RELEASE \
		-DCMAKE_INSTALL_PREFIX=/usr/local \
		-DBUILD_TIFF=ON -DPYTHON_EXECUTABLE=/opt/anaconda/bin/python \
		-DPYTHON_INCLUDE_DIRS=/opt/anaconda/include/python2.7 \
		-DPYTHON_LIBRARY=/opt/anaconda/lib/libpython2.7.so .. && \
	make -j8 install
WORKDIR ../..

## Google flags
RUN git clone https://github.com/gflags/gflags.git
RUN mkdir gflags/build
WORKDIR gflags/build
RUN cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON .. && make -j8 install
WORKDIR ../..

## Google log
RUN git clone https://github.com/google/glog.git
WORKDIR glog
RUN apt-get install -y libtool
RUN autoreconf --force --install && \
	./configure --prefix=/usr/local && \
	echo "#define GOOGLE_GLOG_DLL_DECL " >> src/config.h && \
	make -j8 install
WORKDIR ..

## Protobuf
RUN git clone https://github.com/google/protobuf.git
WORKDIR protobuf
RUN ./autogen.sh && ./configure --prefix=/usr/local && make -j8 install
WORKDIR ..

## Leveldb
RUN git clone https://github.com/google/leveldb.git
WORKDIR leveldb
RUN make -j8
RUN cp out-shared/*.so* /usr/local/lib/ && cp out-static/*.a* /usr/local/lib/ && cp -R include/* /usr/local/include
WORKDIR ..

## Caffe
RUN git clone https://github.com/BVLC/caffe.git
RUN mkdir caffe/build
WORKDIR caffe/build
RUN cmake .. && make -j8

## Opencv python wrappers
RUN conda install -y opencv

## ENV
ENV PYTHONPATH=/caffe/python:$PYTHONPATH

[[endif]]


# Setup PYTHONPATH #
####################
ENV PYTHONPATH=/notebooks:/opt/python-libs


# Configure jupyter at startup
ENV LD_LIBRARY_PATH=/usr/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
RUN echo "#!/bin/bash\n\
echo 'Generating config'\n\
jupyter-notebook --allow-root --generate-config --config=/etc/jupyter-notebook.py\n\
echo 'Replacing config with password'\n\
sed -i \ \n\
        -e \"s/^# *c.NotebookApp.ip = 'localhost'$/c.NotebookApp.ip = '0.0.0.0'/\" \ \n\
        -e \"s/^# *c.NotebookApp.port = 8888$/c.NotebookApp.port = 8888/\" \ \n\
        -e \"s/^# *c.NotebookApp.open_browser = True$/c.NotebookApp.open_browser = False/\" \ \n\
        -e \"s/^# *c.IPKernelApp.matplotlib = None$/c.IPKernelApp.matplotlib = 'inline'/\" \ \n\
        -e \"s/^# *c.NotebookApp.password = u''$/c.NotebookApp.password = u'\$JUPYTER_PASSWORD'/\" \ \n\
        -e \"s/^# *c.NotebookApp.password = ''$/c.NotebookApp.password = '\$JUPYTER_PASSWORD'/\" \ \n\
        -e \"s/^# *c.IPKernelApp.extensions = \[\]$/c.IPKernelApp.extensions = ['version_information']/\" \ \n\
        /etc/jupyter-notebook.py \n\
# Hackity hack to make anaconda behave \n\
rm /opt/anaconda/lib/libstdc++.so.6 \n\
ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /opt/anaconda/lib/libstdc++.so.6 \n\
if [ -n \"\$ENABLE_GOMP_HACK\" ] \n\
then \n\
    rm /opt/anaconda/lib/libgomp.so.1 \n\
    ln -s $(find /usr/lib -name libgomp.so.1) /opt/anaconda/lib/libgomp.so.1 \n\
fi \n\
# Fetch latest SenseTheFlow \n\
if [ -n \"\${FETCH_TF_CONTRIB}\" ] \n\
then \n\
    pip install git+https://www.github.com/farizrahman4u/keras-contrib.git \n\
    git clone https://github.com/gpascualg/SenseTheFlow.git /opt/python-libs/SenseTheFlow \n\
fi \n\
[[if ssh]]
# SSH \n\
/usr/sbin/sshd \n\
[[endif]]
# Start \n\
jupyter-notebook /notebooks --allow-root --config=/etc/jupyter-notebook.py &>/dev/null" > /opt/anaconda/run_jupyter.sh.tpl
RUN sed 's/ *$//' /opt/anaconda/run_jupyter.sh.tpl > /opt/anaconda/run_jupyter.sh
RUN chmod +x /opt/anaconda/run_jupyter.sh

# SSH #
#######
[[if ssh]]

RUN apt-get update && \
	apt-get install -y openssh-server && \
	mkdir /var/run/sshd && \
	mkdir -p  ~/.ssh && \
	chmod 700 ~/.ssh && \
	touch /root/.ssh/authorized_keys && \
	chmod 600 /root/.ssh/authorized_keys

EXPOSE 22
[[endif]]

[[if jupyter_lab]]
ENV NODE_OPTIONS=--max-old-space-size=4096

# Jupyter lab
RUN conda install -y jupyterlab=0.31.12 nodejs && \
	jupyter serverextension enable --py jupyterlab --sys-prefix && \
	jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.34 && \
	conda update -y -c conda-forge ipywidgets

# Do not directly kill processes for god's sake!
RUN sed -i -e "s/content = dict(restart=restart)/content = dict(restart=restart)\n        self.signal_kernel(signal.SIGTERM)/" /opt/anaconda/lib/python3.6/site-packages/jupyter_client/manager.py

# Jupyter lab coranos
[[if coranos]]
RUN cd /tmp && \
	git clone https://github.com/jupyterlab/jupyterlab-monaco && \
	cd jupyterlab-monaco && \
	npm install && \
	npm run build && \
	jupyter labextension link .
[[endif]]
[[endif]]

# At some point we need
#.p-Widget.jp-OutputPrompt.jp-OutputArea-prompt:empty {
#  padding: 0;
#  border: 0;
#}


# Entry point #
###############
# Add Tini
ENV TINI_VERSION v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "--"]
CMD ["/opt/anaconda/run_jupyter.sh"]
